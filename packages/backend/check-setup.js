// check-setup.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic de votre installation Medusa...\n');

// 1. V√©rifier la version de Node
try {
  const nodeVersion = process.version;
  console.log(`‚úÖ Node.js version: ${nodeVersion}`);
  if (parseInt(nodeVersion.split('.')[0].substring(1)) < 18) {
    console.log('‚ö†Ô∏è  Medusa v2 n√©cessite Node.js 18 ou sup√©rieur');
  }
} catch (error) {
  console.log('‚ùå Impossible de v√©rifier la version de Node.js');
}

// 2. V√©rifier PostgreSQL
try {
  execSync('pg_isready', { stdio: 'ignore' });
  console.log('‚úÖ PostgreSQL est en cours d\'ex√©cution');
} catch (error) {
  console.log('‚ùå PostgreSQL n\'est pas accessible');
  console.log('   Lancez PostgreSQL avec: docker-compose up -d');
}

// 3. V√©rifier le fichier .env
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  console.log('‚úÖ Fichier .env trouv√©');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const requiredVars = ['DATABASE_URL', 'STORE_CORS', 'ADMIN_CORS'];
  requiredVars.forEach(varName => {
    if (envContent.includes(varName)) {
      console.log(`   ‚úÖ ${varName} est d√©fini`);
    } else {
      console.log(`   ‚ùå ${varName} manquant`);
    }
  });
} else {
  console.log('‚ùå Fichier .env non trouv√©');
  console.log('   Cr√©ez un fichier .env bas√© sur .env.template');
}

// 4. V√©rifier les d√©pendances
const packageJson = require('./package.json');
const medusaVersion = packageJson.dependencies['@medusajs/medusa'];
console.log(`\n‚úÖ Version de Medusa: ${medusaVersion}`);

// 5. V√©rifier les modules requis
const requiredModules = [
  '@medusajs/inventory',
  '@medusajs/stock-location'
];

console.log('\nüîç V√©rification des modules...');
requiredModules.forEach(module => {
  const modulePath = path.join(__dirname, 'node_modules', module);
  if (fs.existsSync(modulePath)) {
    console.log(`   ‚úÖ ${module} est install√©`);
  } else {
    console.log(`   ‚ùå ${module} n'est pas install√©`);
    console.log(`      Installez avec: npm install ${module}`);
  }
});

console.log('\nüìã Recommandations:');
console.log('1. Assurez-vous que PostgreSQL est lanc√©');
console.log('2. V√©rifiez votre fichier .env');
console.log('3. Installez les modules manquants');
console.log('4. Lancez: npx medusa db:migrate');
console.log('5. Puis: npm run dev');